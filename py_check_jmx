#!/usr/bin/env python

################################################################################################################
# Author: Rhys Campbell                                                                                        #
# Created: 04.12.2017                                                                                          #
# Description: Python plugin to check Cassandra metrics using the jolokia JMX/HTTP bridge https://jolokia.org/ #
# Ideas / code extracted from https://engineeringblog.yelp.com/2016/06/monitoring-cassandra-at-scale.html      #
# This plugin is intent to check single value metrics only.                                                    #
# Usage:                                                                                                       #
#          ./py_check_jmx                                                                                      #
# ##############################################################################################################
import argparse, requests, json

AUTHOR="Rhys Campbell"
VERSION="0.2"

# Nagios Exit Codes
E_OK=0
E_WARNING=1
E_CRITICAL=2
E_UNKNOWN=3

E_STATUS=E_CRITICAL
MSG=""
value=None

try:

    parser = argparse.ArgumentParser(description='Python Nagios Plugin to check and alert on single JMX Metrics. Uses the Jolokia JMX/HTTP bridge. The the paths for MBeans is highly variable... JConsole is very useful for browsing these.')
    parser.add_argument("-H", "--host", default="localhost", help="The JMX host to query")
    parser.add_argument("-P", "--port", default=8778, help="The Jolokia JMX port")
    parser.add_argument("-z", "--protocol", default="http", help="The protocol to use for JMX")
    parser.add_argument("-u", "--username", default=None, help="The JMX username")
    parser.add_argument("-p", "--password", default=None, help="The JMX password")
    parser.add_argument("-m", "--MBeanPath", default="org.apache.cassandra.metrics", help="Class path of metric i.e. org.apache.cassandra.metrics")
    parser.add_argument("-t", "--MBeanType", default="ColumnFamily", help="The metric category i.e. ColumnFamily")
    parser.add_argument("-K", "--MBeanKeyspace", default="", help="The metric keyspace")
    parser.add_argument("-s", "--MBeanScope", default="", help="The metric scope i.e. mx_metadata, * means all")
    parser.add_argument("-n", "--MBeanName", default=None, help="The metric name to query. i.e. WriteLatency")
    parser.add_argument("-k", "--MBeanKeyname", default=None, help="The metric key to query. i.e. Count")
    parser.add_argument("-w", "--warning", help="Set the warning threshold", type=float, dest="warning", default=95.0)
    parser.add_argument("-c", "--critical", help="Set the critical threshold", type=float, dest="critical", default=97.0)
    parser.add_argument("-d", "--debug", action="store_true", default=False, help="Output additional debugigng information")

    args = parser.parse_args()

    auth = requests.auth.HTTPBasicAuth(args.username, args.password) \
                if args.username is not None and args.password is not None else None

    host = "{0}://{1}:{2}".format(args.protocol, args.host, args.port)
    url = "{host}/jolokia/read/{MBeanPath}:type={MBeanType}".format(host=host,
                                                                    MBeanPath=args.MBeanPath,
                                                                    MBeanType=args.MBeanType)
    if args.MBeanKeyspace != "":
        url += ",keyspace={MBeanKeyspace}".format(MBeanKeyspace=args.MBeanKeyspace)
    if args.MBeanScope != "":
        url += ",scope={MBeanScope}".format(MBeanScope=args.MBeanScope)
    if args.MBeanName is not None:
        url += ",name={MBeanName}".format(MBeanName=args.MBeanName)
    if args.MBeanKeyname is not None:
        url += "/{MBeanKeyname}".format(MBeanKeyname=args.MBeanKeyname)

    if args.debug:
        print("url: {0}".format(url))
    resp = requests.get(url, auth=auth)
    if resp.status_code != 200:
        raise requests.exceptions.HTTPError("HTTP Status Code {0}".format(resp.status_code))
    elif len(resp.text) == 0:
        raise Exception("A zero-length response was received")
    else:
        if args.debug:
            print("resp.text: {0}".format(resp.text))
        response_dict = dict(json.loads(resp.text))
        if args.debug:
            print(response_dict)
        mbean = response_dict["request"]["mbean"]
        attribute = response_dict["request"]["attribute"]
        value = response_dict["value"]
        if value is None:
            E_STATUS=E_OK
            MSG="OK:  {0}/{1} returns no value. Probably needs time to warm up".format(mbean, attribute)
        elif args.critical > args.warning:
            if value < args.warning:
                E_STATUS=E_OK
                MSG="OK: {0}/{1} = {2} | {4}={5}".format(mbean,
                                                             attribute,
                                                             value,
                                                             attribute,
                                                             value)
            elif value < args.critical:
                E_STATUS=E_WARNING
                MSG="WARNING: {0}/{1} = {2} | {4}={5}".format(mbean,
                                                                  attribute,
                                                                  value,
                                                                  attribute,
                                                                  value)
            else:
                E_STATUS=E_CRITICAL
                MSG="CRITICAL: {0}/{1} = {2} | {4}={5}".format(mbean,
                                                                  attribute,
                                                                  value,
                                                                  attribute,
                                                                  value)
        elif args.critical < args.warning: # We alert if values drop too low
            if value > args.warning:
                E_STATUS=E_OK
                MSG="OK: {0}/{1} = {2} | {4}={5}".format(mbean,
                                                                  attribute,
                                                                  value,
                                                                  attribute,
                                                                  value)
            elif value > args.critical:
                E_STATUS=E_WARNING
                MSG="WARNING: {0}/{1} = {2} | {4}={5}".format(mbean,
                                                                  attribute,
                                                                  value,
                                                                  attribute,
                                                                  value)
            else:
                E_STATUS=E_CRITICAL
                MSG="CRITICAL: {0}/{1} = {2} | {4}={5}".format(mbean,
                                                                  attribute,
                                                                  value,
                                                                  attribute,
                                                                  value)
        else:
            E_STATUS=E_CRITICAL
            MSG="CRITICAL: warning and critical values should not be the same."

except requests.exceptions.ConnectionError as e:
    E_STATUS=E_CRITICAL
    MSG="CRITICAL: ConnectionError {0}".format(str(e))
except Exception as e:
    E_STATUS=E_CRITICAL
    MSG="CRITICAL: {0}".format(str(e))
finally:
    if len(MSG) > 0:
        print(MSG)
    exit(E_STATUS)
